using System;
using System.Collections.Generic;
using System.Linq;

namespace RockHouse.Collections
{
    /// <summary>
    /// Provides utility methods for IDictionary.
    /// </summary>
    public static class DictionaryUtils
    {
        /// <summary>
        /// Get the number of elements in the dictionary.
        /// This method is null-safe.
        /// </summary>
        /// <typeparam name="K">The type of keys.</typeparam>
        /// <typeparam name="V">The type of values.</typeparam>
        /// <param name="dictionary">An instance of a dictionary. Or null.</param>
        /// <returns>The number of elements in the dictionary, 0 if null.</returns>
        public static int Count<K, V>(IDictionary<K, V>? dictionary)
        {
            return dictionary?.Count ?? 0;
        }

        /// <summary>
        /// Returns an default dictionary if the specified dictionary is null or empty.
        /// </summary>
        /// <typeparam name="K">The type of keys.</typeparam>
        /// <typeparam name="V">The type of values.</typeparam>
        /// <param name="dictionary">Target to determine if it is null or not.</param>
        /// <param name="defaultDictionary">The default dictionary.</param>
        /// <returns>If the specified dictionary is null or empty, defaultDictionary is returned. Otherwise, the original dictionary is returned as is.</returns>
        public static IDictionary<K, V> DefaultIfEmpty<K, V>(IDictionary<K, V>? dictionary, IDictionary<K, V> defaultDictionary)
        {
            return DefaultIfEmpty(dictionary, () => defaultDictionary);
        }

        /// <summary>
        /// Returns an default dictionary if the specified dictionary is null or empty.
        /// </summary>
        /// <typeparam name="K">The type of keys.</typeparam>
        /// <typeparam name="V">The type of values.</typeparam>
        /// <param name="dictionary">Target to determine if it is null or not.</param>
        /// <param name="factory">Factory functor to generate default dictionary.</param>
        /// <returns>If the specified dictionary is null or empty, the default value generated by the factory is returned. Otherwise, the original dictionary is returned as is.</returns>
        public static IDictionary<K, V> DefaultIfEmpty<K, V>(IDictionary<K, V>? dictionary, Func<IDictionary<K, V>> factory)
        {
            if (factory == null)
            {
                throw new ArgumentNullException(nameof(factory));
            }

            if (IsEmpty(dictionary))
            {
                return factory();
            }

            return dictionary;
        }

        /// <summary>
        /// Returns an empty dictionary if the specified ditionary is null.
        /// </summary>
        /// <typeparam name="K">The type of keys.</typeparam>
        /// <typeparam name="V">The type of values.</typeparam>
        /// <param name="dictionary">Target to determine if it is null or not.</param>
        /// <returns>If the specified dictionary is null, an empty Dictionary is returned. Otherwise, the specified dictionary are returned as is.</returns>
        public static IDictionary<K, V> EmptyIfNull<K, V>(IDictionary<K, V>? dictionary)
        {
            if (dictionary == null)
            {
                return new Dictionary<K, V>();
            }
            return dictionary;
        }

        /// <summary>
        /// Determines if the dictionary is empty or not.
        /// This method is null-safe.
        /// </summary>
        /// <typeparam name="K">The type of keys.</typeparam>
        /// <typeparam name="V">The type of values.</typeparam>
        /// <param name="dictionary">An instance of a dictionary. Or null.</param>
        /// <returns>True if the dictionary is null or the number of elements in the dictionary is zero. otherwise False.</returns>
        public static bool IsEmpty<K, V>(IDictionary<K, V>? dictionary)
        {
            return Count(dictionary) == 0;
        }

        /// <summary>
        /// Determines if the dictionary is empty or not.
        /// This method is null-safe.
        /// </summary>
        /// <typeparam name="K">The type of keys.</typeparam>
        /// <typeparam name="V">The type of values.</typeparam>
        /// <param name="dictionary">An instance of a dictionary. Or null.</param>
        /// <returns>True if the number of elements in the dictionary is non-zero, false if the number of elements is zero or the dictionary is null.</returns>
        public static bool IsNotEmpty<K, V>(IDictionary<K, V>? dictionary)
        {
            return Count(dictionary) != 0;
        }
    }
}
