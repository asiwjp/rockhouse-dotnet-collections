using System;
using System.Collections;
using System.Collections.Generic;

namespace RockHouse.Collections
{
    /// <summary>
    /// Provides utility methods for IList.
    /// </summary>
    public static class ListUtils
    {
        /// <summary>
        /// Get the number of elements in the list.
        /// This method is null-safe.
        /// </summary>
        /// <typeparam name="T">The type of elements.</typeparam>
        /// <param name="list">An instance of a list. Or null.</param>
        /// <returns>The number of elements in the list, 0 if null.</returns>
        public static int Count<T>(IList<T>? list)
        {
            return list?.Count ?? 0;
        }

        /// <summary>
        /// Returns an default list if the specified list is null or empty.
        /// </summary>
        /// <typeparam name="T">The type of elements.</typeparam>
        /// <param name="list">Target to determine if it is null or not.</param>
        /// <param name="defaultList">The default list.</param>
        /// <returns>If the specified list is null or empty, defaultList is returned. Otherwise, the original list is returned as is.</returns>
        public static IList<T> DefaultIfEmpty<T>(IList<T>? list, IList<T> defaultList)
        {
            return DefaultIfEmpty(list, () => defaultList);
        }

        /// <summary>
        /// Returns an default list if the specified list is null or empty.
        /// </summary>
        /// <typeparam name="T">The type of elements.</typeparam>
        /// <param name="list">Target to determine if it is null or not.</param>
        /// <param name="factory">Factory functor to generate default list.</param>
        /// <returns>If the specified list is null or empty, the default value generated by the factory is returned. Otherwise, the original list is returned as is.</returns>
        public static IList<T> DefaultIfEmpty<T>(IList<T>? list, Func<IList<T>> factory)
        {
            if (factory == null)
            {
                throw new ArgumentNullException(nameof(factory));
            }

            if (IsEmpty(list))
            {
                return factory();
            }
            return list;
        }

        /// <summary>
        /// Returns an default list if the specified list is null.
        /// </summary>
        /// <typeparam name="T">The type of elements.</typeparam>
        /// <param name="list">Target to determine if it is null or not.</param>
        /// <param name="defaultList">The default list.</param>
        /// <returns>If the specified list is null, defaultList is returned. Otherwise, the original list is returned as is.</returns>
        public static IList<T> DefaultIfNull<T>(IList<T>? list, IList<T> defaultList)
        {
            return DefaultIfNull(list, () => defaultList);
        }

        /// <summary>
        /// Returns an default list if the specified list is null.
        /// </summary>
        /// <typeparam name="T">The type of elements.</typeparam>
        /// <param name="list">Target to determine if it is null or not.</param>
        /// <param name="factory">Factory functor to generate default list.</param>
        /// <returns>If the specified list is null, the default value generated by the factory is returned. Otherwise, the original list is returned as is.</returns>
        public static IList<T> DefaultIfNull<T>(IList<T>? list, Func<IList<T>> factory)
        {
            if (factory == null)
            {
                throw new ArgumentNullException(nameof(factory));
            }

            if (list == null)
            {
                return factory();
            }
            return list;
        }

        /// <summary>
        /// Returns an empty list if the specified list is null.
        /// </summary>
        /// <typeparam name="T">The type of elements.</typeparam>
        /// <param name="list">Target to determine if it is null or not.</param>
        /// <returns>If the specified list is null, an empty List is returned. Otherwise, the specified list are returned as is.</returns>
        public static IList<T> EmptyIfNull<T>(IList<T>? list)
        {
            if (list == null)
            {
                return new List<T>();
            }
            return list;
        }

        /// <summary>
        /// Determines if the list is empty or not.
        /// This method is null-safe.
        /// </summary>
        /// <typeparam name="T">The type of elements.</typeparam>
        /// <param name="list">An instance of a list. Or null.</param>
        /// <returns>True if the list is null or the number of elements in the list is zero. otherwise False.</returns>
        public static bool IsEmpty<T>(IList<T>? list)
        {
            return Count(list) == 0;
        }

        /// <summary>
        /// Determines if the list is empty or not.
        /// This method is null-safe.
        /// </summary>
        /// <typeparam name="T">The type of elements.</typeparam>
        /// <param name="list">An instance of a list. Or null.</param>
        /// <returns>True if the number of elements in the list is non-zero, false if the number of elements is zero or the list is null.</returns>
        public static bool IsNotEmpty<T>(IList<T>? list)
        {
            return Count(list) != 0;
        }
    }
}
